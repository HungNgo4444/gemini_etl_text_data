#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo Parallel Processing - Minh h·ªça t·ªëc ƒë·ªô x·ª≠ l√Ω song song
"""

import pandas as pd
import time
from datetime import datetime

def create_demo_data():
    """T·∫°o d·ªØ li·ªáu demo cho parallel processing test"""
    
    # D·ªØ li·ªáu m·∫´u v·ªõi 50 records ƒë·ªÉ test parallel processing
    demo_data = []
    
    products = ['iPhone 15', 'Samsung Galaxy S24', 'Xiaomi 14', 'OPPO Find X7', 'Vivo V30']
    sentiments = ['positive', 'negative', 'neutral', 'mixed']
    sources = ['Facebook', 'Instagram', 'TikTok', 'YouTube', 'Website']
    
    messages = [
        "S·∫£n ph·∫©m n√†y th·ª±c s·ª± tuy·ªát v·ªùi! Ch·∫•t l∆∞·ª£ng v∆∞·ª£t ngo√†i mong ƒë·ª£i c·ªßa t√¥i.",
        "Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n. S·∫Ω mua l·∫°i l·∫ßn sau.",
        "Gi√° c·∫£ h·ª£p l√Ω, ph√π h·ª£p v·ªõi ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.",
        "D·ªãch v·ª• kh√°ch h√†ng r·∫•t t·ªët, nh√¢n vi√™n t∆∞ v·∫•n nhi·ªát t√¨nh.",
        "S·∫£n ph·∫©m c√≥ m·ªôt s·ªë khuy·∫øt ƒëi·ªÉm nh·ªè nh∆∞ng nh√¨n chung v·∫´n ·ªïn.",
        "Kh√¥ng h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng, kh√¥ng gi·ªëng nh∆∞ m√¥ t·∫£.",
        "Th·ªùi gian giao h√†ng h∆°i l√¢u so v·ªõi cam k·∫øt ban ƒë·∫ßu.",
        "S·∫£n ph·∫©m b√¨nh th∆∞·ªùng, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát ƒë·ªÉ n√≥i.",
        "Thi·∫øt k·∫ø ƒë·∫πp m·∫Øt, m√†u s·∫Øc b·∫Øt m·∫Øt, ph√π h·ª£p v·ªõi xu h∆∞·ªõng.",
        "C√¥ng ngh·ªá hi·ªán ƒë·∫°i, t√≠nh nƒÉng ƒëa d·∫°ng, d·ªÖ s·ª≠ d·ª•ng.",
        "Bao b√¨ s·∫£n ph·∫©m r·∫•t ƒë·∫πp, th√≠ch h·ª£p l√†m qu√† t·∫∑ng.",
        "Hi·ªáu su·∫•t ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh, kh√¥ng g·∫∑p l·ªói g√¨ trong qu√° tr√¨nh s·ª≠ d·ª•ng.",
        "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt, d·ªÖ hi·ªÉu, ph√π h·ª£p v·ªõi m·ªçi ƒë·ªëi t∆∞·ª£ng.",
        "Gi√° th√†nh c√≥ ph·∫ßn cao so v·ªõi m·∫∑t b·∫±ng chung c·ªßa th·ªã tr∆∞·ªùng.",
        "Ch·∫•t li·ªáu cao c·∫•p, ƒë·ªô b·ªÅn t·ªët, x·ª©ng ƒë√°ng v·ªõi s·ªë ti·ªÅn b·ªè ra.",
        "M√†n h√¨nh hi·ªÉn th·ªã s·∫Øc n√©t, ƒë·ªô ph√¢n gi·∫£i cao, tr·∫£i nghi·ªám t·ªët.",
        "Pin c√≥ dung l∆∞·ª£ng l·ªõn, th·ªùi gian s·ª≠ d·ª•ng l√¢u d√†i.",
        "Camera ch·ª•p ·∫£nh s·∫Øc n√©t, m√†u s·∫Øc t·ª± nhi√™n, ch·∫•t l∆∞·ª£ng cao.",
        "√Çm thanh stereo s·ªëng ƒë·ªông, bass m·∫°nh m·∫Ω, trung th·ª±c.",
        "K·∫øt n·ªëi wifi ·ªïn ƒë·ªãnh, t·ªëc ƒë·ªô internet nhanh ch√≥ng.",
    ]
    
    for i in range(50):
        demo_data.append({
            'ID': f'MSG_{i+1:03d}',
            'MESSAGE': messages[i % len(messages)],
            'PRODUCT': products[i % len(products)],
            'SOURCE': sources[i % len(sources)],
            'DATE': f'2025-01-{(i % 30) + 1:02d}',
            'PRIORITY': ['High', 'Medium', 'Low'][i % 3]
        })
    
    df = pd.DataFrame(demo_data)
    filename = 'parallel_demo_data.xlsx'
    df.to_excel(filename, index=False)
    
    print(f"üìä DEMO DATA CHO PARALLEL PROCESSING")
    print("="*50)
    print(f"‚úÖ ƒê√£ t·∫°o file: {filename}")
    print(f"üìà S·ªë records: {len(df)}")
    print(f"üìã C√°c c·ªôt:")
    for i, col in enumerate(df.columns, 1):
        sample_value = df[col].iloc[0]
        print(f"  {i}. {col} (VD: {sample_value})")
    
    print(f"\nüí° H∆∞·ªõng d·∫´n test Parallel Processing:")
    print(f"   1. Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh: python main.py")
    print(f"   2. Ch·ªçn file: {filename}")
    print(f"   3. Ch·ªçn c·ªôt MESSAGE (c·ªôt 2)")
    print(f"   4. Ch∆∞∆°ng tr√¨nh s·∫Ω t·ª± ƒë·ªông detect Parallel Processing")
    print(f"   5. Quan s√°t t·ªëc ƒë·ªô x·ª≠ l√Ω v·ªõi progress bar v√† logs")
    
    print(f"\n‚ö° Performance Expected:")
    print(f"   - Single: ~2.5 ph√∫t (50 records √ó 3s)")
    print(f"   - Batch: ~30 gi√¢y (10 batches √ó 3s)")  
    print(f"   - Parallel: ~15 gi√¢y (5 batches song song)")
    
    print(f"\nüõ†Ô∏è Test Configuration:")
    print(f"   - MAX_CONCURRENT_THREADS = 2")
    print(f"   - THREAD_BATCH_SIZE = 5")
    print(f"   - S·∫Ω c√≥ 2 threads, m·ªói thread x·ª≠ l√Ω 5 records/batch")
    print(f"   - T·ªïng: 5 batches song song thay v√¨ 10 batches tu·∫ßn t·ª±")

if __name__ == "__main__":
    create_demo_data() 