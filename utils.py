import pandas as pd
import numpy as np
import os
import time
import logging
from datetime import datetime, timedelta
from pathlib import Path
import google.generativeai as genai
from tqdm import tqdm

# Import config
from config import (
    MAX_OUTPUT_TOKENS,
    TEMPERATURE, 
    TOP_P,
    TOP_K,
    MAX_RETRIES,
    RETRY_DELAY,
    REQUEST_DELAY,
    SUPPORTED_FORMATS,
    LOG_FILE,
    LOG_LEVEL
)

def setup_logging():
    """Thi·∫øt l·∫≠p logging cho ·ª©ng d·ª•ng"""
    logging.basicConfig(
        level=getattr(logging, LOG_LEVEL),
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(LOG_FILE, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

logger = setup_logging()

def initialize_gemini(api_key, model_name):
    """Kh·ªüi t·∫°o Gemini API v·ªõi c·∫•u h√¨nh"""
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(
            model_name=model_name,
            generation_config={
                "max_output_tokens": MAX_OUTPUT_TOKENS,
                "temperature": TEMPERATURE,
                "top_p": TOP_P,
                "top_k": TOP_K,
            }
        )
        logger.info(f"‚úÖ ƒê√£ kh·ªüi t·∫°o Gemini model: {model_name}")
        return model
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o Gemini: {str(e)}")
        return None

def validate_file_path(file_path):
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ƒë∆∞·ªùng d·∫´n file"""
    if not file_path:
        return False, "ƒê∆∞·ªùng d·∫´n file kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    
    path = Path(file_path)
    
    # Ki·ªÉm tra file c√≥ t·ªìn t·∫°i
    if not path.exists():
        return False, f"File kh√¥ng t·ªìn t·∫°i: {file_path}"
    
    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
    if path.suffix.lower() not in SUPPORTED_FORMATS:
        return False, f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ h·ªó tr·ª£: {', '.join(SUPPORTED_FORMATS)}"
    
    return True, "File h·ª£p l·ªá"

def load_data(file_path):
    """Load d·ªØ li·ªáu t·ª´ file Excel ho·∫∑c CSV"""
    try:
        file_ext = Path(file_path).suffix.lower()
        
        if file_ext in ['.xlsx', '.xls']:
            df = pd.read_excel(file_path)
        elif file_ext == '.csv':
            # Th·ª≠ nhi·ªÅu encoding ƒë·ªÉ tr√°nh l·ªói
            encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']
            df = None
            for encoding in encodings:
                try:
                    df = pd.read_csv(file_path, encoding=encoding)
                    break
                except UnicodeDecodeError:
                    continue
            
            if df is None:
                raise Exception("Kh√¥ng th·ªÉ ƒë·ªçc file CSV v·ªõi c√°c encoding th√¥ng d·ª•ng")
        else:
            raise Exception(f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {file_ext}")
        
        logger.info(f"‚úÖ ƒê√£ load file: {file_path} ({len(df)} records)")
        return df
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói load file: {str(e)}")
        return None

def save_data(df, file_path):
    """L∆∞u d·ªØ li·ªáu ra file Excel ho·∫∑c CSV"""
    try:
        file_ext = Path(file_path).suffix.lower()
        
        if file_ext in ['.xlsx', '.xls']:
            df.to_excel(file_path, index=False)
        elif file_ext == '.csv':
            df.to_csv(file_path, index=False, encoding='utf-8-sig')
        else:
            raise Exception(f"ƒê·ªãnh d·∫°ng file output kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {file_ext}")
        
        logger.info(f"‚úÖ ƒê√£ l∆∞u file: {file_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói l∆∞u file: {str(e)}")
        return False

def detect_message_column(df):
    """T·ª± ƒë·ªông ph√°t hi·ªán c·ªôt ch·ª©a message"""
    possible_columns = ['MESSAGE']
    
    for col in possible_columns:
        if col in df.columns:
            return col
    
    # N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ c·ªôt ƒë·∫ßu ti√™n c√≥ ki·ªÉu text
    for col in df.columns:
        if df[col].dtype == 'object':
            return col
    
    return None

def generate_output_filename(input_file):
    """T·∫°o t√™n file output d·ª±a tr√™n file input"""
    input_path = Path(input_file)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_name = f"{input_path.stem}_ai_result_{timestamp}{input_path.suffix}"
    return str(input_path.parent / output_name)

def generate_checkpoint_filename(input_file):
    """T·∫°o t√™n file checkpoint d·ª±a tr√™n file input"""
    input_path = Path(input_file)
    checkpoint_name = f"{input_path.stem}_checkpoint{input_path.suffix}"
    return str(input_path.parent / checkpoint_name)

def load_checkpoint(checkpoint_file):
    """Load checkpoint n·∫øu t·ªìn t·∫°i"""
    try:
        if os.path.exists(checkpoint_file):
            df = load_data(checkpoint_file)
            if df is not None:
                logger.info(f"üîÑ ƒê√£ load checkpoint: {checkpoint_file}")
                return df
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è L·ªói load checkpoint: {str(e)}")
    
    return None

def save_checkpoint(df, checkpoint_file):
    """L∆∞u checkpoint"""
    try:
        save_data(df, checkpoint_file)
        logger.info(f"üíæ ƒê√£ l∆∞u checkpoint: {checkpoint_file}")
    except Exception as e:
        logger.error(f"‚ùå L·ªói l∆∞u checkpoint: {str(e)}")

def process_text_with_ai(model, text, prompt, max_retries=MAX_RETRIES):
    """X·ª≠ l√Ω text v·ªõi AI model"""
    for attempt in range(max_retries):
        try:
            # T·∫°o prompt ƒë·∫ßy ƒë·ªß
            full_prompt = f"{prompt}\n\nN·ªôi dung c·∫ßn x·ª≠ l√Ω:\n{text}\n\nK·∫øt qu·∫£:"
            
            # G·ªçi API
            response = model.generate_content(full_prompt)
            
            # Delay ƒë·ªÉ tr√°nh rate limit
            time.sleep(REQUEST_DELAY)
            
            if response and response.text:
                result = response.text.strip()
                logger.debug(f"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: {text[:50]}...")
                return result
            else:
                raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ AI")
                
        except Exception as e:
            error_msg = str(e)
            
            # X·ª≠ l√Ω l·ªói rate limit
            if "429" in error_msg or "quota" in error_msg.lower():
                if attempt < max_retries - 1:
                    wait_time = RETRY_DELAY * (attempt + 1)  # TƒÉng d·∫ßn th·ªùi gian ch·ªù
                    logger.warning(f"‚è≥ Rate limit reached. Ch·ªù {wait_time} gi√¢y...")
                    time.sleep(wait_time)
                    continue
            
            # X·ª≠ l√Ω l·ªói kh√°c
            logger.error(f"‚ùå L·ªói x·ª≠ l√Ω text (attempt {attempt + 1}): {error_msg}")
            
            if attempt < max_retries - 1:
                time.sleep(5)  # Ch·ªù ng·∫Øn tr∆∞·ªõc khi th·ª≠ l·∫°i
                continue
    
    return f"L·ªói x·ª≠ l√Ω sau {max_retries} l·∫ßn th·ª≠"

def process_multicolumn_with_ai(model, row_data, column_names, prompt, max_retries=MAX_RETRIES):
    """X·ª≠ l√Ω nhi·ªÅu c·ªôt v·ªõi AI model"""
    try:
        # T·∫°o c·∫•u tr√∫c d·ªØ li·ªáu cho prompt
        data_structure = "\n".join([
            f"{i+1}. {col_name}: {clean_text(str(row_data.get(col_name, 'N/A')))}"
            for i, col_name in enumerate(column_names)
        ])
        
        # T·∫°o ph·∫ßn ƒë·ªãnh nghƒ©a c·ªôt cho prompt
        column_definitions = "\n".join([
            f"- C·ªôt {i+1} ({col_name}): {_get_column_description(col_name)}"
            for i, col_name in enumerate(column_names)
        ])
        
        # T·∫°o prompt ƒë·∫ßy ƒë·ªß v·ªõi ƒë·ªãnh nghƒ©a c·ªôt
        full_prompt = f"""
{prompt}

TH√îNG TIN C√ÅC C·ªòT:
{column_definitions}

D·ªÆ LI·ªÜU C·∫¶N X·ª¨ L√ù:
{data_structure}

K·∫øt qu·∫£:"""
        
        # G·ªçi h√†m x·ª≠ l√Ω AI
        return process_text_with_ai(model, "", full_prompt, max_retries)
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói x·ª≠ l√Ω multi-column: {str(e)}")
        return f"L·ªói x·ª≠ l√Ω multi-column: {str(e)}"

def _get_column_description(column_name):
    """T·∫°o m√¥ t·∫£ cho c·ªôt d·ª±a tr√™n t√™n c·ªôt"""
    return column_name

def estimate_completion_time(processed, total, start_time):
    """∆Ø·ªõc t√≠nh th·ªùi gian ho√†n th√†nh"""
    if processed == 0:
        return "Kh√¥ng th·ªÉ ∆∞·ªõc t√≠nh"
    
    elapsed = time.time() - start_time
    rate = processed / elapsed  # records per second
    remaining = total - processed
    
    if rate > 0:
        eta_seconds = remaining / rate
        eta = datetime.now() + timedelta(seconds=eta_seconds)
        return f"D·ª± ki·∫øn ho√†n th√†nh: {eta.strftime('%H:%M:%S %d/%m/%Y')}"
    
    return "Kh√¥ng th·ªÉ ∆∞·ªõc t√≠nh"

def print_progress_summary(processed, total, start_time, errors=0):
    """In b√°o c√°o ti·∫øn tr√¨nh chi ti·∫øt"""
    elapsed = time.time() - start_time
    rate = processed / elapsed if elapsed > 0 else 0
    
    print(f"\n{'='*60}")
    print(f"üìä B√ÅO C√ÅO TI·∫æN TR√åNH:")
    print(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {processed}/{total} ({processed/total*100:.1f}%)")
    print(f"‚ö° T·ªëc ƒë·ªô: {rate:.2f} records/gi√¢y")
    print(f"‚è±Ô∏è Th·ªùi gian ƒë√£ ch·∫°y: {elapsed/3600:.1f} gi·ªù")
    print(f"‚ùå L·ªói: {errors}")
    print(f"‚è∞ {estimate_completion_time(processed, total, start_time)}")
    print(f"{'='*60}\n")

def validate_prompt(prompt):
    """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa prompt"""
    if not prompt or prompt.strip() == "":
        return False, "Prompt kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    
    if len(prompt.strip()) < 10:
        return False, "Prompt qu√° ng·∫Øn (t·ªëi thi·ªÉu 10 k√Ω t·ª±)"
    
    return True, "Prompt h·ª£p l·ªá"

def clean_text(text):
    """L√†m s·∫°ch text tr∆∞·ªõc khi x·ª≠ l√Ω"""
    if pd.isna(text):
        return ""
    
    text = str(text).strip()
    
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng mong mu·ªën
    text = text.replace('\n\n\n', '\n\n')
    text = text.replace('\t', ' ')
    
    return text

def get_processing_stats(df, result_column):
    """L·∫•y th·ªëng k√™ qu√° tr√¨nh x·ª≠ l√Ω"""
    if result_column not in df.columns:
        return {
            'total': len(df),
            'processed': 0,
            'remaining': len(df),
            'errors': 0
        }
    
    total = len(df)
    processed = len(df[df[result_column].notna() & (df[result_column] != "")])
    errors = len(df[df[result_column].str.contains("L·ªói", na=False)])
    remaining = total - processed
    
    return {
        'total': total,
        'processed': processed,
        'remaining': remaining,
        'errors': errors
    } 